每天进步一点点，未来前进一大步：
--------------------------------------------------------
没有生活的是不经历风雨的

洗礼，在生活中总会遇到各种各样的事物，
坚持本心，不忘初心，在原则的圈圈里，做只属

于美好的事情。
开心最重要！
--------------------------------------------------------
上午：
虽然今天没有网络，

但是还是可以写一写记录的，每天都要有所进步，这样的一天才不会太无聊。

小程序学习：
config.js客户端配置client:
  配置中的
  host：服务端主机名；
  config:这是一个对象形

式的json格式
        service：这个json数据中，存在配置
            host:这些地址都

是配合云端demo工作，所以在实际开发中，要是想使用自己的测试控制器之类的方法，
      

      还是需要在这种测试文件夹之外；
            loginUrl:`${host}/weapp/login`,
   

         requestUrl:`${host}/weapp/user`,
            tunnelUrl:`

${host}/weapp/tunnel`,
            uploadUrl:`${host}/weapp/upload`
  
  
  最后还在

module模型中，输出这个配置config
  module.exports = config;
  
  微信小程序中的

module.exports和exports的区别：
  其中exports其实是module.exports的引用，就是为了

不暴露接口，但是两者的使用时，尽量还是使
  module.exports来进行引用相关接口。
  
  

---------------------------------------
  微信小程序中，对象的指向关系的理解：
  

page{
    onLoad:{
        var a = {name:"张三"};
        var b = a;
        

console.log(a);
        console.log(b);
        
       b.name = "李四";
       

console.log(a);
       console.log(b);
       
       var b = {name:"王五"};
       

console.log(a);
       console.log(b);
    }
  }
  ____    ____    _____   _____    

_____   ___
  上面的输出结果：
  {name:"张三"}
  {name:"张三"}
  {name:"李四"}
  

{name:"李四"}  
  {name:"李四"}  
  {name:"王五"}  
  

--------------------------------------------
  
  
  
  
  
  



解释一下：
a是一个对象，b是对a的引用，那么就是b和a指向同一个对象，即：a和b指向同一块内存地址
 

所以前两个输出一样。
当对b进行修改时，即a和b指向同一块内存地址的内容发生了变化，所以a也会体现出来，
因此，第三第四个输出的是一样的。
当对b完全覆盖时，此时b对象指向了一块新的内存地址（并没有对原先的内存块进行改变）

，所以a还是指向的原来的内存块，即a和b不在指向同一块内存，也就是说a和b已毫无关系，

所以最后两个不一样。
 

exports是对module.exports的引用；
module.exports初始值为一个空对象{},所以exports初始值也是{};




给exports赋值，其实就是给module.exports这个空对象添加属性而已；



知道他们之间的区别之后，使用他们的时候，也有两种情况：
第一种：当module.exports是空对象：
这个时候，两个进行引用属性的使用，效果是一样的；

第二种：当module.exports不是一个空对象，而是一个有属性的对象，那么此时，对于他们

的使用，就只能module.exports的引用使用暴露接口，
这个时候不能用exports进行暴露接口,否则会出现is not a function的错误提示；



--------------------------------------------------------------------
综上所述：当module.exports指向新的对象时，exports就断开了与modules.exports的引用

，module.exports指向了新的内存块，但是exports还是指向原来的内存块，。
因此，再不是很清楚的知道两者的关系的时候，请采用module.exports来暴露接口，尽量不

使用exports来暴露接口。




-----------------------------------------
package.json：就是一个json文件，json本身是一种数据格式,而不是程序语言，一般的程序语言，都会支持注释，
但作为数据格式，它本身并不支持注释，所以只能通过其他方式绕了；

小程序中的app.js和app.json
app.js是小程序的脚本代码，可以在这个文件中监听小程序的生命周期函数、声明全局变量；



--------------------------------------------------------------------------------------------------------------
app.json是对整个小程序的全局配置；
我们可以在这个文件中配置小程序由那些页面组成，配置小程序的窗口背景色，配置导航栏样式，配置默认标题，网络超时；

pages:一个数组，每一项都是字符串；指定小程序由哪些页面组成，路径+文件名；
注意：数组的第一项，必须代表小程序的初始页面，小程序中新增减少页面，都需要对pages进行修改；





-------------------------------------------------------------------------------------
# Wafer 服务端 Demo - PHP

本仓库是 [Wafer](https://github.com/tencentyun/wafer) 组成部分，提供 PHP 版本业务服务器示例。示例需要和[微信小程序客户端示例](https://github.com/tencentyun/weapp-client-demo)配合一起使用。

## 运行示例

选择合适的方式[部署 Wafer](https://github.com/tencentyun/wafer/wiki#%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F)，并按照[小程序创建资源配置指引](https://github.com/tencentyun/weapp-doc)进行操作，可以得到运行本示例所需的资源和服务。请参考以下配置。

- SDK 配置文件：`/etc/qcloud/sdk.config`
- 示例代码部署目录：`/data/release/php-weapp-demo`
- 运行示例的 nginx 配置文件: `/etc/nginx/conf.d/php-weapp-demo.conf`
- PHP 版本：`v5.6.27`
- composer 版本：`v1.2.1`
- nginx 版本：`v1.10.1`

## 项目结构

```
Demo
├── application
│?? ├── business
│   │?? └── ChatTunnelHandler.php
│?? ├── cache
│?? ├── config
│?? ├── controllers
│   │?? ├── Welcome.php
│   │?? ├── Login.php
│   │?? ├── User.php
│   │?? └── Tunnel.php
│?? ├── core
│?? ├── helpers
│   │?? └── general_helper.php
│?? ├── hooks
│?? ├── language
│?? ├── libraries
│?? ├── logs
│?? ├── models
│?? ├── third_party
│?? ├── vendor
│?? └── views
│?   ?  └── welcome_message.php
├── index.php
├── install_qcloud_sdk.php
├── composer.json
└── system
```

示例使用 `CodeIgniter(v3.1)` 框架制作。其中，`index.php` 是 启动文件，`install_qcloud_sdk.php` 用于初始化 SDK 配置，配置从文件 `/etc/qcloud/sdk.config` 中读取。配置文件包含如下配置项：

```json
{
    "serverHost": "业务服务器的主机名",
    "authServerUrl": "鉴权服务器地址",
    "tunnelServerUrl": "信道服务器地址",
    "tunnelSignatureKey": "和信道服务器通信的签名密钥",
    "networkTimeout": 30000
}
```
其中 `networkTimeout` 为超时时间，单位是**毫秒**。

`composer.json` 文件中声明了对 SDK 的依赖，可执行命令 `composer install` 安装依赖。

`application/controllers/` 目录包含了示例用到的4个路由，路由和处理文件映射关系如下：

```
// 首页指引
/ => application/controllers/Welcome.php

// 登录
/login => application/controllers/Login.php

// 获取微信用户信息
/user => application/controllers/User.php

// 处理信道请求
/tunnel => application/controllers/Tunnel.php
```

`application/business/ChatTunnelHandler.php` 是业务处理信道请求的示例代码。

`application/helpers/general_helper.php` 包含简单的 `debug` 方法用于打印日志。


## 更新 SDK 版本
进入目录 `/data/release/php-weapp-demo`，然后执行命令 `composer update` 即可。


## 如果在demo基础上开发
将自己开发的接口放到如下目录下即可生效
/data/release/php-weapp-demo/application/controllers/

## 重启服务：
 ? ? ? ?service php-fpm restart
        

-------------------------------------------------------------------------------------

chdir(dirname(__FILE__)):这个函数用来将当前的工作目录改变成，以参数path所指的目录；

realpath()函数：返回绝对路径//该函数删除所有符号链接，返回绝对路径名。
		若失败，返回false,(比如说文件不存在)


DERECTORY_SEPARATOR:分隔符


pathinfo(path路径,option选项):以数组的形式返回文件的路径信息;
（PATHINFO_BASENAME   PATHINFO_DIRNAME   PATHINFO_EXTENSION）


mod_rewrite？








































































  
  
