每天进步一点点，未来前进一大步：
------------------------------
6 day|deadlineL:12.12 Today is the last one day.
Oh!My God!
----------------------------------------------------
egret学习：数据data、发送游戏操作、接收游戏操作、处理游戏逻辑

---------------------------------------------------------
上午：
    回顾egret前端的来龙去脉！
    9:40-10:40：分析象棋路数
    GameDataParse:参与者uid、游戏面板gamePanel、发生事件，
    on+逻辑事件：代表接收事件发生的反映
    GameRoot.ts:处理时间发生的关系
                
    
    
    11:00-12:00：尝试五子棋数据交互
    
    
    界面的初始化，init()方法中可以看出，大概的东西都是在
    init()中进行初始化界面的一些东西，并将在主面板中的spr_main中的一些元件
    在初始化创建房间的时候，进行布局的控制。
    以及一些用户的头像，及其他东西的显示，进行控制加载；
    当用户头像不为空时，进行重新加载用户头像（by角色）；
    初始化用户头像时，需要将用户头像图片的坐标位置，宽高进行设置；
    设置之后，设置头像的准备方法。
    showReady():头像中展示准备工作
    
    层级：
    CreatePanel:
        点击ok按钮--->
        on_okBtn(e:egret.Event){
            this.create();
            //创建房间,平台那边控制房间创建，将创建数据数据发送到服务端，
            //服务端接收到create()创建房间消息，服务端进行创建数据的接收处理，之后发送消息
            给客户端
        }
        
     客户端通过MjGameRoot处理服务端发送过来的消息
     MjGameRoot：
            onGameMessage(data:any):viod{
                var tag:string = data:tag;
                if(tag == "initGame"){
                    //XiangqiGameData:象棋缓存数据，获取缓存数据类
                    XiangqiGameData.putCurrentGame(data.game);//缓存游戏数据
                    var game:XiangqiGame = XiangqiGameData.getCurrentGame();/获取当前游戏数据
                    
                    //接下来，创建游戏面板
                    this.gamePanel = new GamePanel();
                    this.addChild(this.gamePanel);
                    
                    
                    //获取当前房间数据，创建游戏的名称，房卡支付，速度来站的....描述
                    var room:Room = RoomData.getCurrentRoom();
                    var des:string = "中国象棋，";
                    if(rom.aa){
                        des += "AA支付房卡，";
                    }else{
                        des += "房主支付房卡，";
                    }
                    
                    des += ",速度来战";
                    WxUtils.customizeShareDesc(null,des,true);//自定义游戏分享内容，仅小游戏使用
                }else if(this.gamePanel != null){
                    var fun:Function = this.gamePanel.dataParse.tagEvents[tag];//这是当游戏面板有了之后，进行逻辑操作
                    //tagEvent[tag]:就是服务端发送过来的接口方法--->来进行客户端处理数据逻辑的接口
                    //并且：gamePanel中的dataParse中tagEvents[tag]处理
                    //即：this.gamePanel.dataParse.tagEvents[tag]
                    //dataParse:GameDataParse类
                    if(fun != null) fun.apply(this.gamePanel.dataParse,[data]);
                }
            }
            
            dataParse:GameDataParse类
            GameDataParse:主要进行服务端向客户端处理逻辑关系
            this.tagEvents['ready'] = this.OnReady;//这是由服务端传递过来的ready接口，进行客户端接口的处理
            
            
    
