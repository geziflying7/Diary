每天进步一点点，未来前进一大步：
--------------------------------------------------------------------------
生活中的假象智能总让你感觉到这个世界是不正常的，
有些人自以为是的对你好，但是，出于另一种对你亲近人交流而非你的时候，
本身的对象反应就是有问题的，这一点毋庸置疑。
背后夸奖你，当面怼你；这种态度总能让我联想到：人前风光圆滑，背后落井下石。
生活对我怎么了，让我总是觉得对自己最好的保护方式，就是少说话，多做事。
并不是一成不变就是安全与美好，在变革中，找到自己最适合的地方，充实自己，无畏无惧。
--------------------------------------------------------------------------
上午：fore medierm/morning
     1、昨天的RedisShardProxy以及其他文件，redis处理哈希算法：一致性hash；
        RedisFlexihashHelper，用来对redis进行调用，在redis中使用hash算法，缓存数据
        最后在redis中调用getRedis();--------------根据redis的配置，来获取redis的主机、端口、dbIndex：进而找到redis缓存数据的存储地方
     2、实例化RedisUtil.php，之后连接connect($host,$port),判断：有没有密码权限auth(pwd),
        之后根据redis进行对象查找select(dbIndex):$this->redis = new RedisUtil();
        其中，对于$redis对象：其实就是封装在RedisUtil中的对象：$redis = new Redis();在那个类中，将redis对象的一些属性，以及方法进行连接connect()
        有关于redis的一些设置：例如持续时间等的属性值参数，连接状态$redis->isConnect = false;
        都是可以在连接redis对象的时候实现：
                              如果有持续时间的话，pconnect()：连接一个redis实例或者是重用一个redis连接
                              否则，持续时间不是真，那么，就相当于第一次连接：connect();
     3、sessionManager.php：
               此类就是对redis缓存数据添加，获取，删除，设置session标识，以及删除下线玩家数据；
                    其中，设置值的时候，setValue()：会进行数据时间上的设置BaseDao::getRedis()->setTimeout(xxx,Values::时间参数)；
                    Values.php:
                           这个时候，Values中就是对于数据的一些固定参数的处理:
                                             一年、一月、一天、一小时、一分钟；7天、15分钟.......
                                             uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。----------当前时间
                                             
     4、继续进行RedisUtil.php：这是一个处理redis的基础类 -------------- 衍生出来的类：RedisShardProxy.php：逻辑上实现基础类的方法以及属性数据
          RedisUtil.php:
                    $redis:对象
                    $isConnect:连接状态
                    __construct():$this->redis=new Redis()  实例化redis对象
                    connect($host,$post,$persistant = false): 连接redis(根据IP。端口，持续时间) 
                    auth($pwd): $this->redis->auth(pwd);   根据redis代理传递过来pwd,是否授权(Redis.php)
                    select($dbIndex):选择redis数据库
                    flushDB():清空当前选择库  
                    flushAll():清空所有库
                    randomKey():随机返回key空间中的一个key ($key = $redis->randomKey(); 找到值：$value = $redis->get($key);)
                    setTimeout($key,$expire):设定过期时间  expire():http://redis.io/commands/expire：需要设置过期时间的key,$expire:过期多少秒
                    exists():判断某个key值是否存在
                    str_Set($key,$value,$timeout = 604800):添加字符串  
                                        $timeout <0 :$redis->set($key,$value) 
                                        else : $redis->exset($keyy,$value,$timeout):参数中的字符串设置超时时间
                    str_delete($key):$redis->del($key,...)  删除字符串
                    str_Get($key):获取字符串 
                    list_lPush($key,$value):在list左边头添加元素  （理解：正常添加顺序，之后的反转顺序）
                    list_rPush($key,$value):在list右边头添加元素
                    list_lPop($key):在list左边头删除元素 （右边添加，左边删除lpop()）
                    list_rPop($key):在list右边头删除元素
                    list_lSize($key):$redis->lLen($key) 获取list长度
                    list_lSet($key,$index,$value):设置指定位置的值    $redis->lSet($key,$index,$value)
                    list_lGet($key,$index):获取指定位置的值           $redis->lIndex($key,$index)
                    
                    ----------------------
                    /**
                        * 截取list
                        * */
                       public function list_lTrim($key,$start,$end){
                           $this->redis->lTrim($key,$start,$end);
                       }

                       public function list_lRem($key,$value,$count){
                           return $this->redis->lRem($key,$value,$count);
                       }

                       public function list_lRange($key,$start,$end){
                           return $this->redis->lRange($key,$start,$end);
                       }

                         public function list_lIndex($key, $value){
                              return $this->redis->lIndex($key, $value);
                         }


                       public function hash_hSet($hashName,$key,$value,$expire=604800){
                           $this->redis->hSet($hashName,$key,$value);
                           if($expire > 0){
                               $this->setTimeout($hashName, $expire);
                           }
                       }

                       public function hash_hGet($hashName,$key){
                           return $this->redis->hGet($hashName,$key);
                       }

                       public function hash_hLen($hashName){
                           return $this->redis->hLen($hashName);
                       }

                       public function hash_hDel($hashName,$key){
                           $this->redis->hDel($hashName,$key);
                       }

                       public function hash_hKeys($hashName){
                           return $this->redis->hKeys($hashName);
                       }

                       public function hash_hVals($hashName){
                           return $this->redis->hVals($hashName);
                       }

                       public function hash_hGetAll($hashName){
                         $array = $this->redis->hGetAll($hashName);
                           return $array;
                       }

                       public function hash_hExists($hashName,$key){
                           return $this->redis->hExists($hashName,$key);
                       }

                       public function hash_hMset($hashName,$values){
                           $this->redis->hMset($hashName,$values);
                       }

                       public function hash_hMGet($hashName,$keys){
                           foreach($keys as $index => $value){
                               $keys[$index] = (string)$value;
                           }
                           return $this->redis->hmGet($hashName,$keys);
                       }
                      ------------------------------------------------
                    str_putObject($key,$object,$expire=604800):缓存json对象————$redis->str_Set($key, json_encode($object),$expire);
                    str_getObject($key,$class=null,$toArray=false):获取对象 
                                   $data = $redis->str_Get($key):获取key值
                                   判断$data是否是空：返回null
                                   $class == null:返回 反json数据的是否是数组值
                                      否则，反json数据，实例化这个类对象，使用parse（）：用来解析JSon字符串
                    hash_putObject($hashName,$key,$value,$expire=604800)：缓存hash对象 缓存hash事，指定hash的$hashName =‘h’
                    hash_getObject($hashName,$key,$class=null,$toArray=false):获取hash对象
                                     $data = $redis->hash_hGet($hashName,$key);获取hash中值
                                     判断$data数据是空：返回null
                                     判断class类是空的：返回反json数据的数组($toArray)
                                     判断Class不是空的类：反JSon数据，之后实例化这个类class()------parse($data):转换数据 
                                                         返回转换数据的对象：基础类BaseVO.php
                                             BaseVO.php: 
                                                       对于redis数据进行处理的数据处理类     
                                                       其中最重要的也就是转换数据parse():转换数据，首先要看到数据是否是数组
                                                       ArrayUtil.php:
                                                                 objectToArray($object):把对象转换成数组 
                                                                                get_object_vars($object):返回由对象属性组成的关联数组
                                                                                
                    hash_getAllObjecy($hashName,$class=null,$toArray=false):获取hashmap中所有的值，这时候取出来的是array，所以循环转换成对象的数组
                    -----顺序添加值????????????------------down--？？？？？？？？？？？？？？？？？？？？？？---------------
                    sortedSet_zAdd($key,$score,$value)：
                                        $redis->ZADD($key,$score,$value)：->zAdd()将指定分数的指定成员添加到存储在键上的排序集中。
                    sortedSet_zRem($key,$value):
                                        $redis->ZREM($key,$value):从有序集合中删除指定成员
                    sortedSet_zRemRangeByScore($key,$start,$end):
                                        $redis->zRemRangeByScore($key,$start,$end):删除存储在指定键中的排序集的元素，
                                                                                   这些元素的范围（开始、结束）中有分数。
                    sortedSet_zCard($key):
                                        $redis->ZCARD($key):获取集内部数据的总条数
                    sortedSet_zCount($key,$start,$end):
                                        $redis->ZCOUNT($key,$start,$end):根据分数区间，获取集内部数据的总条数
                    sortedSet_zIncrby($key,$score,$value)：
                                        $redis->ZINCBY($key,$score,$value):为某个值，增加/减少 分数
                    ---------------------------------------------------------------------------------------------------------
                    ——————————————————————————————————————————————————————————
                              /**
                               * 
                               * @param $params 可选 WITHSCORES 键值对 
                               */
                            public function sortedSet_zRange($key,$start,$end,$params = null){
                                return $this->redis->ZRANGE($key,$start,$end,$params);
                            }

                            public function sortedSet_zRevRange($key,$start,$end, $params = null){
                                return $this->redis->ZREVRANGE($key,$start,$end, $params);
                            }

                            public function sortedSet_zRangeByScore($key,$start,$end,$params = array()){
                                return $this->redis->ZRANGEBYSCORE($key,$start,$end,$params);
                            }

                            public function sortedSet_zRevRangeByScore($key,$start,$end,$params = array()){
                                return $this->redis->ZREVRANGEBYSCORE($key,$start,$end,$params);
                            }

                            public function sortedSet_zRank($key,$value){
                                return $this->redis->ZRANK($key,$value);
                            }

                            public function sortedSet_zRevRank($key,$value){
                                return $this->redis->ZREVRANK($key,$value);
                            }

                            public function sortedSet_zScore($key,$value){
                                return $this->redis->ZSCORE($key,$value);
                            }
                    ————————————————————————————————————————————————————————————
                    keys($key):$redis->keys($key):返回与某个模式匹配的键
                    del($key):$redis->del($key):删除缓存
                    close():$redis->close():断开与redis的实例，除非使用pconnect();
                    ttl($key):$redis->ttl($key):获取key剩余生存时间
                    type($key):$redis->type($key):返回key所存储值的类型 none:int(0) string:int(1) list:int(3) set:int(2) zset:int(4) hash:int(5)
                    incr($key,$value = 1,$expire = 604800):计数器 自增
                                   $data = $redis->incrBy($key,$value):递增一个键存储的数字，第二个参数用做增量值
                                   $expire > 0:设置过期时间$redis->setTimeout($key);
                    decr($key,$value = 1,$expire = 604800):
                                   $data = $redis->decrBy($key,$value):递减一个键存储的数字，第二个参数用做递减值
                                   $expire > 0:设置过期时间$redis->setTimeout($key);
                    mget($keys):$redis->mget($keys): 一次获取多个keys值（哈希？？）      返回值：array
                    getMultiple($keys):$redis->getMultiple($keys):取出多个keys值     ？？
                    getLastError():$redis->getLastError():返回最后一个错误消息           $redis->eval()
                    
          RedisShardProxy.php
                    大致都是实例化RedisUtil.php的方法
                    
     下午：post medierm/afternoon
          生活的本质是在最简单重复的工作中发现最美好不平凡的事情。
          做好每一件值得自己付出一切精力的劳动，没有无缘无故的付出，总会在适当的时候，让你感动。
          
          
          
          
          
          
          
          
          
          
          
          
          
          
               
        
