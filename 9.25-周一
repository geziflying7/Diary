"每天进步一点点，未来前进一大步"——技术在于积累 
1、淄博麻将玩法收集中
2、枣庄麻将测试还没进行

从头开始：login
登陆的时候：缓存发送者信息以及角色信息，麻将游戏，发送麻将手牌，游戏中缓存的操作列表，
是否需要展示操作：默认是不要展示，
如果游戏当前操作者，记录出过牌，并且发送者玩家不是出牌状态，而且发送者玩家没有缓存操作，
那么展示操作；
新牌是-1；如果当前操作者是发送者，是出牌状态，那么新派：就是游戏中的新麻将；
发送的游戏数据：获取游戏发送到客户端的数据
getGameSendMsg：克隆游戏，删除mjList,删除新牌newMj,return游戏game
向玩家推送消息sendMessage:
  经过cmd:gameMessage  
  最后  
  经过转发消息forwardData:找到目标服务器， 
  经过转发连接池：forwardData:找到目标服务器主机 端口，转发数据， 
  在转发连接池中，自调转发消息forwardData: 使用forwardClient中的信息 
  转发数据中判断：消息转发客户端是否存在，是否关闭过；如果是的话，new forwardClient,放进转发连接池数组中，
  这时候，有了可以转发消息的客户端：调用转发客户端的发送数据 forwardClient->send($dataStr,$pack);
  发送数据：还要判断 swoole客户端 连接是否成功，连接状态，发送this->send; 没有swoole客户端，不是连接状态，发送数据缓存队列，判断没有连接，就去链接$this->connect();
    ---------------------------------------------------------
    |转发客户端中的connnect($packLen): new swoole_client(1,1) |
    |连接成功，发送缓存队列消息，接收消息，出错，关闭           |
    --------------------------------------------------------- ???????  
    swoole_Client:转发数据，连接 发送，接收，出错，关闭 ----重点！！！！！！
    
    
    createRoom:创建房间
      发送数据信息缓存，请求中纯正建房间信息，创建局数，包冲类型，能吃初始化，
      创建游戏数据 MjGameConstant::createGame($room,$jushu);
         ----------------------------
         |createGame($room,$jushu):|
         ---------------------------
                  金花牌局数据，基础数据，作为游戏数据；
                  游戏号等于房间号，
                  当前操作者等于第一个玩家player，庄家等于第一个玩家player,
                  当前局数等于第一局，最大局数等于发送的参数$jushu，
                  这一局的麻将等于洗牌麻将：
                              -----------------------------------
                              MaJiangConstant::refreshMajiang() |
                              ----------------------------------
                                        洗牌：
                                        将1-34个数循环4遍，放进麻将数组,
                                        将35-42循环1遍，放进数组；
                                        打乱数组shuffle($arr),return
                  麻将总数等于这一局麻将的count,
                  return $mjGame;
      游戏包冲，游戏能吃；
      缓存麻将游戏
      向发送者推送消息，
      向平台发送游戏创建成功消息：'c'=>'gameCreate'
 
 joinRoom():加入房间
     缓存发送者信息，从缓存中获取麻将游戏，
     向发送者推送游戏信息
     
leaveRoom：

endGame($request):
    缓存中获取游戏数据，
    检测游戏结束：
      ----------------------------------
      |checkOver($game,$over = false): |
      ----------------------------------
            强制结束游戏，$over = true,主要记录log，
            结束游戏的房间roomId，
            游戏结束的时间：DateUtil::makeTime();
            log的info信息：角色名称，角色id，角色总分数，
            向平台发送信息：
                  保存战绩：logScore 'c'=>'logScore'
                  发送游戏结束：sendGameOver 'c'=>'gameOver'
            删除缓存中的麻将游戏数据：delMajiangGame
            删除房间中的玩家麻将数据：delPlayerMajiangByRoom  
                                    ->del("mjChiMsg:$uid")包括删除麻将吃牌数据信息
            删除操作，操作并发数记录：clearOperating
    向房间所有人推送'tag'=>'endGame'结束游戏：  
            ---------------------------------------------------------
            |RoomConstant::pushMsgToRoom(null,$msg,$this->room,true)|
            ---------------------------------------------------------
                  所有人：true相关，默认false
            

disbandRoom：玩家解散房间 就是清除房间，等于清除游戏，清除麻将数据，清除操作数据

gameMessage：？？？
/**
 * 玩家像游戏房间发送消息：当向玩家推送消息时，就会出现cmd = 'gameMessage'
 */
    public function gameMessage($request){
        if(!isset($request['tag'])) return;
        $tag = $request['tag'];
        if(method_exists($this,$tag)){
            $this->$tag($request);
        }
    }
    
 
 ready:
    this中的发送者，this中的房间号，
    获取缓存中的游戏数据，判断缓存数据中的游戏是否开始，
    变更发送者ready[$uid]信息：一个发送者准备好 状态判断
    ----
    获取游戏逻辑中所有发送者准备好：isAllReady
            --------------------------
            |isAllReady($room,$game):|
            --------------------------
                  房间中玩家数量不等于4 ，还有人没有进入房间；
                  游戏中ready信息，循环时，如果有某个ready[$uid]不存在，
                  说明不是所有人准备好，还有人需要$game->ready[$uid] = 1
                  return false;
                  return true;
    ---------              
    |准备好：|
    ---------
    每个玩家麻将手牌开始值：null，
          不是游戏第一局：
                  删除玩家房间中缓存麻将数据，
                  删除游戏中操作缓存数据；
          确定第一局：
                  当前局数等于1，是第一局，那么，初始化分数：
                  房间中玩家，如果总分数为空时，游戏中总分数为空数组；
                  每个玩家总分数为0；
                  向平台发送消息：
                        sendGameStart(): 'c'=>'gameStart'
                        sendUseCard():  'c'=>'useCard'
                        消耗房卡,一般在第一轮游戏完成之后就调用
         获取游戏数据和手牌数据：
                ------------------------------------------
                |MjGameConstant::startGame($room,$game)：|
                ------------------------------------------
                        初始化游戏数据，
                        MaJiangConstant::faMj($room,$game)：返回结果
                            ———————————————————————————————————————————
                            |faMj:前3手每人4张，最后一手 庄家2张 闲家1张 |
                            ____________________________________________________________________________
                            上代码：
                            $zhuang = $game->zhuang;
                            $players = $room->player;
                            $totalMoCount = 4;//摸牌次数
                            $majiangList = array();
                            if($totalMoCount>0){
                              for($i=0; $i<=4;$i++){
                                $uid = $players[$i];
                                $playerMaJiang = isset($majiangList[$uid]) ? $majiangList[$uid]:array();
                                if($totalMoCount>1){
                                  for($j=0;$j<=4;$j++){
                                    array_push($palyerMaJiang, $game->mjList[$game->currentMj]);
                                    $game->currentMj++;
                                  }
                                }else{
                                  if($uid == $zhuang){
                                    array_push($palyerMaJiang, $game->mjList[$game->currentMj]);
                                    $game->currentMj++;
                                    array_push($palyerMaJiang, $game->mjList[$game->currentMj]);
                                    $game->currentMj++;
                                  }else{
                                    array_push($palyerMaJiang, $game->mjList[$game->currentMj]);
                                    $game->currentMj++;
                                  }
                                }
                                sort($playerMaJiang);
                                $majiangList[$uid] = $palyerMaJiang;
                              }
                              $totalMoCount--;//大于1 前3手 等于1 最后一手
                            }
                            $game->currentMj2 = 0;//杠后，倒着摸牌的麻将索引
                        ____________________________________________________________________________________
                        --------------------------------------------------   
                返回值：
                [0]:$game,更新游戏缓存数据
                [1]:$mjLists 更新玩家麻将缓存数据
    -----------
    |没准备好：一个一个开始准备，变更准备数据；
    -----------
    
    更新游戏缓存数据;=======[0]:$game,更新游戏缓存数据，放在这里更新！！！！
    
    向房间中所有人推送:发送者准备好了；
    
    所有人准备好的话，向玩家推送消息：'tag'=>'startGame' 'mjList' 'game'
    
 
