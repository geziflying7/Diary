每天进步一点点，未来前进一大步：
----------------------------
也许，今天你还没有进步，
但是你的每一步都会被时间记录下来，
并在今后的每一分钟里，体现它的价值。
----------------------------
上午：fore medierm/morning
    回顾：TuiDaoHu.php
         上周对TuiDaoHu.ts进行了分析，
         1、首先是将mjList进行重新整理，得到一个关于各路类型的牌型总数；
         2、并根据这个二维数组进行判断麻将是否胡牌；
         3、mjList 克隆一下，根据对9余数、还有取整，行、列，进行分类，存入到准备好的二维数组中，分别代表的意思
         4、是否做将，哪一行做将；
         5、根据每一行总数 %3的值，判断有且仅有一组牌型做将：
            其他组 %3 == 1,说明不是3个一样的牌，或者3个连子，这是这把麻将不能胡；
            否则，%3 ==2，这把有将牌true，做将组记录下来；
         6、这把牌，没有将牌组，不能胡；
         7、不是做将组，找铺排，判断参数是字（isWord中发白风组 jiangPos == 3），如果不能找铺排，不能胡，可以找铺排，继续；
         8、继续做将组，找铺排，判断字（isWord）;
         9、返回值：success = false;根据上面找铺排，判断是否成功；
         10、找铺排，循环做将；
             当前组的每一个值 >=2，并且是is258做将，减掉2值，判断找铺排成功，胡牌；
             否则，继续找下一值做将 >=2，减掉2值，判断找铺排,..........
         zhaopupai：
         1、找铺排数量++，为了能够好的记录牌数；
         2、当前组麻将总数为0，找铺排成功；
         3、循环当前做将组每一个值，如果！=0，说明做将组，有不是连子或者3个，不能胡；
         4、如果都满足，开始判断是否是3个一样，不一样的是否组成连子；    记录返回结果；
         5、>=3减掉3个，递归找铺排，返回结果；
         6、不是字 或者 字i==1,i<8,i+1 i+2 对应麻将值存在；都减掉-1，总数减掉3，判断找铺排，返回结果；
         7、全部都不满足，返回结果；
   开始：
         findTing(mjList):
         1、将一维数组转换成二维数组，并记录数量，成为一个新数组；
         2、1-34，存储可能胡的牌，缺牌可以省略；意思就是：只要那一组，出现一个牌，就将所有牌遍历出来，放在allMjs中，记录成可以胡的牌；
         3、记录huMjs、tingMjs、chuMjs：要胡的麻将，听的麻将组，要出的麻将报听；
         4、_mjList = clone(mjList),
            遍历出牌：_mjList.splice(i,1)中每一个麻将，取出，判断特殊牌型--------------？？？？;
                __mjLists = clone(_mjLists),
                遍历所有可能胡的牌allMjs:__mjLists.push(allMjs[j]);
                      判断this.hu(__mjLists)能胡的情况下：
                              记录出这张牌报听：chuMjs.push(mjList[i]);//判断这张牌不在chuMjs中，避免重复
                              判断chuMjs.length-huMjs.length == 1:------------------------------------???????
                                  记录出这张牌能胡：huMjs.push([allMjs[j]]);//注意：这是一个数组
                              否则，humjs最后一个数组中，没有这张牌：
                                  记录出这张牌能胡：huMjs[huMjs.length - 1].push([allMjs[j]]);//注意：这是一个数组
                                  
                                  
                                  
                                  
