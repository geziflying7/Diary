每天进步一点点，未来前进一大步：
--------------------------------------------------------------------------------
美好的心情，都是从一天的清晨开始。
今天的确是美好的一天：
虽然是冬季，但是眼光明媚，虽然温暖中带有一丝丝的凉意，但是生日的氛围将这点
凉意消失无影无踪。
没有人在这一天是不高兴的，虽然我还有很多无厘头的想法，但是，能有多少个这样的日子呢？
在有限的生命中，好好享受这一天吧。
---------------------------------------------------------------------------------
上午：fore medierm/morning
    开始：
    1、亲爱的朋友，没有人会为你的生命精彩与否买单。
       爱自己，趁着有限的生命，创造不一样的精彩。
    2、
        ____________________________________________
        游戏主体的关键位置：swoole文件夹
        swoole/
             business/
                   extgame/
                         ExtGameBusiness.php
        ____________________________________________                 
        ExtGameBusiness.php:游戏服务器接受消息的载体                      继承自BaseBusiness.php:这是一个业务解析模型
              init($swProxyServer,$work_id):SwooleProxyServer启动服务的初始化                 
                    引入自动加载文件：autoloader.php:            
                                    在这个文件中，初始化autoloader::init():这是为了确定根目录，并且实例化自动加载文件对象。
                                    date_default_timezone_set("PRC"):设置默认时区 
              index($swProxyServer,$fd,$data):处理业务
                    $data = json_decode($data,true);//将json数据解析成数组
                    判断$data不是数组，直接返回；
                    $reqData = $this->parseRequest($data);//处理一次请求数据，返回数组
                    ——————————————————————————————————————————————————————————————————————————————
                  a、请求的数组中，取出'c'=》值:$cStr = $reqData['c'];
                    $serverName = ApiConfig::$ExtGameRpcServiceName;  //项目应用配置的游戏逻辑处理类
                    实例化这个类；
                    ——————————————————————————————————————————————————————————————————————————————
                  b、定义这个类中发送者信息：请求数据中的$reqData['sender']?
                    判断sender不是null,定义发送者id(senderUId): ->senderUid = ->sender[0]
                  c、请求的数组中，$reqData['room']？
                     实例化Room();
                     将请求的room数据转换，$room->parse($reqData['room']);
                     定义游戏服务器中的->room  = $room;
                  d、请求数据中的角色信息；
                     实例化角色类；
                     同样转换角色数据；
                     定义发送者角色：->senderRole = $role;
                  e、判断$server中$cStr的方法是否存在？method_exists($server,$cStr)
                     存在即调用这个方法：$server->$cStr($reqData);
                      
              parseRequest($request)：foreach循环判断，请求数据是字符串，并且字符串的组合是{ [ 开始，将json数据解析成数组，并返回数组；
        BaseBusiness.php:
              这个类是业务解析模型：
                           init($swProxyServer,$work_id):启动服务器的初始化
                           index($swProxyServer,$fd,$data):游戏中请求数据处理接口
                           
                           onConnect($swProxyServer, $fd, $from_id)：连接服务器的接口
                           onClose($swProxyServer, $fd, $from_id)：关闭服务器的接口
                           packData($data)：封包  将数据封包返回：$data = pack('N',strlen($data)) . $data; 'N':代表无符号的长字符串
                           unPackData($data)：解包  $data = substr($data, 4,strlen($data)); 解析32位的无符号字符串数据
       _-----------------------------------------------------------------------------------------------------------------------------
       接下来，开始分析的是SwooleWebSocketProxyServer.php
       SwooleWebSocketProxyServer.php:
            继承自SwooleProxyServer.php:这个类中将Swoole代理服务器的一些设置，初始化，连接服务器的接口已经准备好了
            
            SwooleWebSocketProxyServer:
                $server:swoole_websocket_server 其实这就是：异步非阻塞的websocket服务器进程 通过几行php代码实现
                
                __construct($business):$this->business = $business; business相当于业务模型
                
                start():这是swoole服务器代理开始的接口
                            在ExtGameService.php中，实例化swoole代理服务器之后，调用这个方法开始进行游戏逻辑；
                    a、register_shutdown_function("SwooleProxyServer::handleFatal"):当我们的脚本执行完成或意外死掉导致PHP执行即将关闭时,我们的这个函数将会 被调用
                    b、$this->setProcessTitle():关于游戏服务器的一些设置 ？？？？？？？？？？？_______$this:这个是很有深意的，来自继承
                    c、new swoole_websocket_server(SwooleSetting::$host,SwooleSetting::$port):实例化swoole服务器
                            $server->set(SwooleSetting::$setting); 用于swoole_server运行时的一些参数设置
                                                包括：线程数，启动worker运行数，Task进程的数量（server必须注册onTask、onFinish两个回调函数，
                                                如果没有注册，server将不会启动）heartbeat_check_interval：每隔x秒，便利所有连接，如果在x秒内没有
                                                向服务器发送任何数据，此链接关闭。
                                                $server->on('xx',array(类名,回调函数)): 注册事件的回调函数
                            
                            $server->on("start",array($this,"onStart")); 
                            $server->on("workerStart",array($this,"onWorkerStart"));
                            $server->on("open",array($this,"onOpen"));
                            $server->on("message",array($this,"onMessage"));
                            $server->on("close",array($this,"onClose2"));
                            $server->on("task",array($this,"onTask"));
                            $server->on("finish",array($this,"onFinish"));
                            $server->on("pipeMessage",array($this,"onPipeMessage"));

                            $server->start();启动服务器
                    d、上面的所有的调用函数：处理的逻辑都是在SwooleProxyServer.php中进行调用的
                            ForwardClientPool：转发连接池，开始心跳
                            SwooleTimerManager::初始化时间管理者
                                        ->tick(时间，调用函数)：swoole进行时的服务器的定时器
                            SwooleTaskManager::initManager():初始化task进程服务器
                            $this->business->init($this,$work_id)：启动服务器 初始化服务器
                            onConnect(swoole_server $server,$fd,$from_id):有新的进程进入时，在worker中回调(不是主进程中)
                            onReceive(swoole_server $server,$fd,$from_id,$data):服务器接收新的数据时，将数据解包unpack(),处理业务index()
                            onClose(swoole_server $server, $fd, $from_id):关闭进程，结束模型业务
                            onTask($server,$task_id,$from_id,$data)：task进程 $data->excute($this)？？？？？
                            onFinish($server,$task_id,$data)：同样跟上面的onTask是一样的，都在task进程触发的时候使用
                            onPipeMessage($server, $src_worker_id, $data)：当工作进程收到senMessage发送的管道消息时触发，worker/task进程都会触发
                                    onPipeMessage:
                                            首先将json数据解析成数组，
                                            取出这个数组数据中的cmd：$data['cmd'],
                                            判断$cmd == 'timer':添加一个定时器 或者 一个倒计时 （$data['ty']判断）
                                            判断$cmd == 'retimer':清除定时器
                            sendData($fd,$data):发送数据
                            sendObjectData($fd,$data):发送对象数据
                            handleFatal():swooleproxyserver这个是swoole代理服务器在进行完所有的php程序之后，进行的错误显示接口
                            
                            
                            
                   ---------------------------------------------------------------------------------         
                   $serivceName = ApiConfig::$ExtGameRpcServiceName;：接下来开始分析ApiConfig中的事情
                   ApiConfig:
                        static $ExtGameRpcServiceName = "MajiangService";静态变量命名 ，游戏逻辑类名
                        getApi($key):
                                    $class = $this->config[$key];
                                    return new $class();//返回配置键实例化类
                   ---------------------------------------------------------------------------------
                   
                   
                   logicPath.php:
                   
                   swoole/business/game/
                        GameBusiness.php:游戏解析模型     继承自BaseBusiness.php
                            在swoole代理服务器时，被调用init()初始化，加载很多文件，现在来一一分析一下撒
                          init($swProxyServer,$work_id)：服务启动调用
                                        require_once __DIR__ . "/../../../class/autoloader.php";//加载自动加载文件
                                        require_once "LoginPath.php";//加载登录地址文件
                                        require_once "LogicPath.php";//加载逻辑地址文件
                                        require_once "ForwardPath.php";//加载转发地址文件
                                        require_once "AdminPath.php";//加载后台地址文件
                                        autoloader::init();//自动加载类，调用初始化，作用：实例化上面加载的文件类
                                        
                            
                            
                                    
             
                
            
